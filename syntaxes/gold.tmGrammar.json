{
  "scopeName": "source.gold",
  "uuid": "63661b9d-cf52-4bbe-b3e2-251d5072cf91",
  "patterns": [{ "include": "#comments" }],
  "repository": {
    "comments": {
      "begin": ";",
      "end": "[\n\r]",
      "name": "comment.line",
      "patterns": "[\\w\\W]*"
    }
  },
  "fileTypes": [
    "gold",
    "god"
  ],
  "name": "Gold",
  "patterns": [
    {
      "comment": "Comments",
      "match": "[;].*",
      "name": "comment.line.character"
    },
    {
      "captures": {
        "1": {
          "name": "storage.type"
        },
        "4": {
          "name": "keyword.other"
        },
        "6": {
          "name": "storage.type.gold"
        }
      },
      "comment": "Variable definitions",
      "match": "(var ){0,1}([a-zA-Z\\_][a-zA-Z0-9\\_]*)( :)( refTo|listOf){0,1}( \\[.*\\]){0,1}( [a-zA-Z\\_][a-zA-Z0-9\\_]*)"
    },
    {
      "comment": "Numeric constants",
      "match": "\\b(-)?([0-9]+[.][0-9]+)\\b|\\b([0-9]+)\\b",
      "name": "constant.numeric"
    },
    {
      "comment": "Character constants",
      "match": "[#][0-9]{3}",
      "name": "constant.character"
    },
    {
      "captures": {
        "1": {
          "name": "constant.language"
        }
      },
      "comment": "Language constants",
      "match": "\\b(true|True|false|False|nil|Nil)\\b"
    },
    {
      "captures": {
        "1": {
          "name": "variable.language"
        }
      },
      "comment": "Language constants",
      "match": "\\b(self|Self|_Result)\\b"
    },
    {
      "comment": "Numeric constants",
      "match": "\\b(fetch|select|OQLClassId|OQLCount|OQLMax|OQLMin|OQLSum|OqlUpdateDate|OqlUpdateTime|or|ord|order|by|out|pass|and|bAnd|bNot|bOr|bXor|where|like|not|xor|into|Upcase|using)\\b",
      "name": "keyword.operator"
    },
    {
      "captures": {
        "1": {
          "name": "storage.type"
        }
      },
      "comment": "Types",
      "match": "\\b(Int1|Int2|Int4|Int8|Num8|Text|Pointer|CString|Decimal|Boolean|int|char|array|chr)\\b"
    },
    {
      "comment": "Types",
      "match": "\\b(num)\\([0-9]+\\)\\b",
      "name": "storage.type"
    },
    {
      "captures": {
        "1": {
          "name": "keyword.other"
        }
      },
      "comment": "General keywords",
      "match": "\\b(_MethodName|_ModuleName|_move|absolute|allVersionsOf|begin|concat|continue|descending|dispose|distinct|exit|first|from|Group|by|in|inherited|instanceOf|inOut|inverse|last|length|listOf|member|memory|MetaModelEntity|new|nil|num|of|PhantomsToo|pred|refTo|reimplem|return|Scenario|sizeof|step|string|succ|throw|uses|versioned|Write|WriteLn|at|packed|anycase|dynamic|rem|global|remote|multiLang)\\b"
    },
    {
      "captures": {
        "1": {
          "name": "keyword.structure"
        }
      },
      "comment": "Structural keywords",
      "match": "\\b(class|endClass|module|endModule|function|endFunc|procedure|endProc|nativeRecord|record|endRecord|end)\\b"
    },
    {
      "captures": {
        "1": {
          "name": "keyword.control"
        }
      },
      "comment": "Flow control keywords",
      "match": "\\b(if|then|elseIf|elseif|else|endIf|while|endWhile|for|to|downTo|forEach|endFor|repeat|until|loop|endLoop|break|try|catch|when|endWhen|finally|endTry|switch|endSwitch|when)\\b"
    },
    {
      "captures": {
        "1": {
          "name": "storage.type"
        }
      },
      "comment": "Entity declaration",
      "match": "\\b(class|module|function|procedure|nativeRecord|record|var|const|type)\\b"
    },
    {
      "comment": "Modifiers keywords",
      "match": "\\b(public|private|protected|final|override|forward|external|memory)\\b",
      "name": "storage.modifier"
    },
    {
      "begin": "\"",
      "comment": "Strings in \"\"",
      "end": "\"",
      "name": "string.quoted.double",
      "patterns": [
        {
          "match": "= '[#][0-9]{3}'",
          "name": "constant.character"
        }
      ]
    },
    {
      "begin": "\\'",
      "comment": "Strings in ''",
      "end": "\\'",
      "name": "string.quoted.simple",
      "patterns": [
        {
          "match": "[#][0-9]{3}",
          "name": "constant.character"
        }
      ]
    },
    {
      "begin": "\\[",
      "comment": "Annotations",
      "end": "\\]",
      "name": "punctuation.definition.tag",
      "patterns": [
        {
          "match": "(type:)",
          "name": "keyword.control"
        }
      ]
    },
    {
      "begin": "(function)\\b([a-zA-Z][a-zA-Z0-9]*)\\b(\\(.*\\))?\\b(return)\\b([a-zA-Z][a-zA-Z0-9]*)",
      "beginCaptures": {
        "2": {
          "name": "entity.name.function"
        }
      },
      "comment": "Function definition",
      "end": "(endFunc)",
      "name": "entity.other"
    },
    {
      "begin": "(procedure)\\b([a-zA-Z][a-zA-Z0-9]*)\\b",
      "beginCaptures": {
        "2": {
          "name": "entity.name.function"
        }
      },
      "comment": "Procedure definition",
      "end": "(endProc)",
      "name": "entity.other"
    }
  ]
}