{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Gold",
	"patterns": [
		{"include": "#comments"},
		{"include": "#statement"},
		{"include": "#keyword"},
		{"include": "#constant"},
		{"include": "#identifier"}
	],
	"repository": {		
		"comments": {
			"name": "comment.line",
			"begin": ";",
			"end": "[\n\r]"
		},

		"statement":{
			"patterns": [
				{"include": "#class-declaration"},
				{"include": "#method-call"},
				{"include": "#method-decl"},
				{"include": "#var-decl"},
				{"include": "#type-annotation"}
			]
		},
		"class-declaration":{
			"name": "meta.class",
			"comment": "Labels class name and inherited class name, end impossible to match so will go to end of file",
			"match": "(?i)\\b(?:(class)\\s+)(?:(\\w+))?(?:\\s*\\(([\\w]+)\\))?",
			"captures": {
				"1": { "patterns": [{"include": "#storage-class"}]},
				"2": { "patterns": [{"include": "#class-ident"}]},
				"3": { "patterns": [{"include": "#class-ident"}]}
			}
		},
		"method-call":{
			"match": "(?i)(\\w+)\\(",
			"captures": {
				"1": {"patterns": [
					{"include": "#method-ident"}
				]}
			}
		},
		"method-decl-no-param":{
			"match": "(?i)(proc|procedure|func|function)\\s+([\\w#]+)",
			"captures": {
				"1": {"name": "storage.type"},
				"2": {"patterns": [
					{"include": "#method-ident"}
				]}
			}
		},
		"method-decl-param":{
			"begin": "(?i)(proc|procedure|func|function)\\s+([\\w#]+)\\s*\\(",
			"end": "\\)",
			"beginCaptures": {
				"1": {"name": "storage.type"},
				"2": {"patterns": [
					{"include": "#method-ident"}
					]}
			},
			"patterns": [
				{"include": "#keyword"},
				{"include": "#var-decl"},
				{"include": "#param-type-annotation"},
				{"include": "#identifier"}
			]
		},
		"method-decl":{
			"patterns": [
				{"include": "#method-decl-param"},
				{"include": "#method-decl-no-param"}
			]
		},
		
		"var-decl":{
			"name": "variable",
			"match": "(?i)(\\w+)\\s*(?=:)",
			"captures": {
				"1": {"patterns": [{"include": "#identifier"}]}
			}
		},
		"param-type-annotation":{
			"match": "(?i):\\s*([^;,\\(\\)]+)",
			"captures": {
				"1": {
					"patterns": [
						{"include": "#type-basic"}
					]
				}
			}
		},
		"type-annotation":{
			"match": "(?i):\\s*([^;]+)",
			"captures": {
				"1": {
					"patterns": [
						{"include": "#type-ref"},
						{"include": "#type-record"},
						{"include": "#type-range"},
						{"include": "#type-array"},
						{"include": "#keyword"},
						{"include": "#type-basic"}
					]
				}
			}
		},
		"type-ref":{
			"match": "(?i)(refto|listof)(?:\\s*\\[[\\w\\s,]*\\]\\s*)?\\s(\\w+)",
			"captures": {
				"1": {"patterns": [{"include": "#storage-ref"}]}, 
				"2": {"patterns": [{"include": "#type-ident"}]}
			}
		},
		"type-basic":{
			"match": "(?i)([A-Za-z_]\\w*)",
			"captures": {
				"1": {"patterns": [{"include": "#type-ident"}]}
			}
		},
		"type-record":{
			"match": "(?i)(record)",
			"captures": {
				"1": {"name": "storage.type"}
			}
		},
		"type-range":{
			"match": "(?i)([\\w']+)\\s+(to)\\s+([\\w']+)",
			"captures": {
				"1": {"patterns": [
					{"include": "#constant-integer"},
					{"include": "#constant-string-single"}
					]},
				"2": {"name": "keyword.other.operator.other"},
				"3": {"patterns": [
					{"include": "#constant-integer"},
					{"include": "#constant-string-single"}
					]}
			}
		},
		"type-array":{
			"match": "(?i)(array|sequence)\\s*(?:\\[(.+)\\])\\s*(of)\\s+(\\w+)",
			"captures": {
				"1": {"patterns": [{"include": "#storage-array"}]},
				"2": {"patterns": [
					{"include": "#type-basic"},
					{"include": "#type-range"}
					]},
				"3": {"patterns": [{"include": "#keyword-operator-other-words"}]},
				"4": {"patterns": [{"include": "#type-ident"}]}
			}
		},

		

		"identifier": {
			"name": "variable",
			"match": "(?i)\\b[A-Za-z_]\\w*\\b"
		},
		"method-ident": {
			"patterns": [
				{"include": "#method-ident-name"},
				{"include": "#keyword-other"}
			]
		},
		"method-ident-name": {
			"name": "entity.name.function",
			"match": "(?i)\\b[A-Za-z_]\\w*\\b"
		},
		"class-ident": {
			"name": "entity.name.class",
			"match": "(?i)\\b[A-Za-z_]\\w*\\b"
		},
		"type-ident": {
			"name": "entity.name.type",
			"match": "(?i)\\b[A-Za-z_]\\w*\\b"
		},


		"storage": {
			"patterns": [
				{ "include": "#storage-class"},
				{ "include": "#storage-module"},
				{ "include": "#storage-function"},
				{ "include": "#storage-procedure"},
				{ "include": "#storage-modifier-all"},
				{ "include": "#storage-type"},
				{ "include": "#storage-record"},
				{ "include": "#storage-array"},
				{"include": "#storage-other"}
			]
		},
		"storage-class": {
			"name": "storage.type",
			"match": "(?i)\\bclass\\b"
		},
		"storage-module": {
			"name": "storage.type",
			"match": "(?i)\\bmodule\\b"
		},
		"storage-function": {
			"name": "storage.type",
			"match": "(?i)\\b(endfunc|function|func)\\b"
		},
		"storage-procedure": {
			"name": "storage.type",
			"match": "(?i)\\b(endproc|procedure|proc)\\b"
		},
		"storage-ref": {
			"name": "storage.type",
			"match": "(?i)\\b(refto|listof)\\b"
		},
		"storage-type": {
			"name": "storage.type",
			"match": "(?i)\\btype\\b"
		},
		"storage-record": {
			"name": "storage.type",
			"match": "(?i)\\b(endrecord|record)\\b"
		},
		"storage-array": {
			"name": "storage.type",
			"match": "(?i)\\b(array|sequence)\\b"
		},
		"storage-other": {
			"name": "storage.type",
			"match": "(?i)\\b(instanceof)\\b"
		},
		"storage-modifier-all": {
			"patterns": [
				{"include": "#storage-modifier-scope"},
				{"include": "#storage-modifier-method"},
				{"include": "#storage-modifier-variable-parameters"},
				{"include": "#storage-modifier-variable-class"},
				{"include": "#storage-modifier-reference"}
			]
		},
		"storage-modifier-scope": {
			"name": "storage.modifier.scope",
			"match": "(?i)\\b(protected|private|override|final)\\b"
		},
		"storage-modifier-method": {
			"name": "storage.modifier.scope",
			"match": "(?i)\\b(forward)\\b"
		},
		"storage-modifier-variable-parameters": {
			"name": "storage.modifier.variable",
			"match": "(?i)\\b(const|inout|var)\\b"
		},
		"storage-modifier-variable-class": {
			"name": "storage.modifier.variable.class",
			"match": "(?i)\\b(memory|inverse)\\b"
		},
		"storage-modifier-reference": {
			"name": "storage.modifier.reference",
			"comment": "matchine single reference annotation",
			"match": "(?i)\\b(Versioned|IsVersioned|InTransaction|IsOwner|IsCurProject|IsIntegral|IsActive|V|T|O|P|I|A)\\b"
		},


		"keyword":{
			"patterns": [
				{"include": "#keyword-control"},
				{"include": "#keyword-operator"},
				{"include": "#keyword-vars"},
				{"include": "#keyword-other"},
				{"include": "#storage"}
			]
		},
		"keyword-control": {
			"patterns": [
				{ "include": "#keyword-control-conditional-start"},
				{ "include": "#keyword-control-conditional-intermediate"},
				{ "include": "#keyword-control-conditional-end"},
				{ "include": "#keyword-control-loop-start"},
				{ "include": "#keyword-control-loop-end"},
				{ "include": "#keyword-control-flow"},
				{ "include": "#keyword-control-trycatch"}
			]
		},
		"keyword-control-conditional-start": {
			"name": "keyword.control.conditional",
			"match": "(?i)\\b(if|switch|when)\\b"
		},
		"keyword-control-conditional-intermediate": {
			"name": "keyword.control.conditional",
			"match": "(?i)\\b(elseif|else)\\b"
		},
		"keyword-control-conditional-end": {
			"name": "keyword.control.conditional",
			"match": "(?i)\\b(endif|endswitch|endwhen)\\b"
		},
		"keyword-control-loop-start": {
			"name": "keyword.control.loop",
			"match": "(?i)\\b(while|for|foreach|loop|repeat)\\b"
		},
		"keyword-control-loop-end": {
			"name": "keyword.control.loop",
			"match": "(?i)\\b(endwhile|endfor|endloop|until)\\b"
		},
		"keyword-control-trycatch": {
			"name": "keyword.control.trycatch",
			"match": "(?i)\\b(try|catch|finally|endtry)\\b"
		},
		"keyword-control-flow": {
			"name": "keyword.control.flow",
			"match": "(?i)\\b(return|exit|break|continue)\\b"
		},
		"keyword-operator":{
			"patterns": [
				{"include": "#keyword-operator-arithmetic"},
				{"include": "#keyword-operator-string"},
				{"include": "#keyword-operator-shift"},
				{"include": "#keyword-operator-comparison"},
				{"include": "#keyword-operator-logical"},
				{"include": "#keyword-operator-bitwise"},
				{"include": "#keyword-operator-other"},
				{"include": "#keyword-operator-other-words"}
			]
		},
		"keyword-operator-arithmetic":{
			"name": "keyword.operator.arithmetic",
			"match": "(\\+\\+|\\*|\\/|%|\\+|-)"
		},
		"keyword-operator-string":{
			"name": "keyword.other.operator.string",
			"match": "(?i)(&&|\\blike\\b)"
		},
		"keyword-operator-shift":{
			"name": "keyword.operator.shift",
			"match": "(>>|<<)"
		},
		"keyword-operator-assignment":{
			"name": "keyword.operator.comparison",
			"match": "(=|:=)"
		},
		"keyword-operator-comparison":{
			"name": "keyword.operator.comparison",
			"match": "(<>|<=|>=|<|>|=)"
		},
		"keyword-operator-logical":{
			"name": "keyword.other.operator.logical",
			"match": "\\b(and|or|not|xor)\\b"
		},
		"keyword-operator-bitwise":{
			"name": "keyword.other.operator.bitwise",
			"match": "(?i)\\b(bAnd|bOr|bNot|bXor)\\b"
		},
		"keyword-operator-other":{
			"name": "keyword.operator.other",
			"match": "(\\.)"
		},
		"keyword-operator-other-words":{
			"name": "keyword.other.operator.other",
			"match": "(?i)\\b(uses|inverse|in|of)\\b"
		},
		"keyword-vars":{
			"patterns": [
				{"include": "#keyword-vars-result"},
				{"include": "#keyword-reserved"},
				{"include": "#keyword-vars-self"}
			]
		},
		"keyword-vars-result":{
			"name": "keyword.other.vars.result",
			"match": "(?i)\\b(_result|_Result)\\b"
		},
		"keyword-vars-self":{
			"name": "keyword.other.vars.result",
			"match": "(?i)\\b(self)\\b"
		},
		"keyword-reserved":{
			"name": "keyword.other",
			"match": "(?i)\\b(_modulename|_methodname|of)\\b"
		},
		"keyword-other":{
			"name": "keyword.other",
			"match": "(@|#)"
		},




		"constant":{
			"patterns": [
				{"include": "#constant-boolean"},
				{"include": "#constant-nil"},
				{"include": "#constant-integer"},
				{"include": "#constant-decimal"},
				{"include": "#constant-character"},
				{"include": "#constant-string-single"},
				{"include": "#constant-string-double"}
			]
		},
		"constant-boolean":{
			"name": "constant.language.boolean",
			"match": "(?i)\\b(true|false)\\b"
		},
		"constant-nil":{
			"name": "constant.language.nil",
			"match": "(?i)\\b(nil)\\b"
		},
		"constant-integer":{
			"name": "constant.numeric.integer",
			"match": "\\b(\\d+)\\b"
		},
		"constant-decimal":{
			"name": "constant.numeric.decimal",
			"match": "\\b(\\d+(?:\\.\\d*)?)\\b"
		},
		"constant-character":{
			"name": "constant.character",
			"match": "(#\\d{1,3}\\b)"
		},
		"constant-string-single": {
			"name": "string.quoted.single.gold",
			"begin": "'",
			"end": "'(?=[^']|$)",
			"patterns": [
				{
					"name": "constant.character.single-quote.escape.gold",
					"match": "''"
				}
			]
		},
		"constant-string-double": {
			"name": "string.quoted.single.gold",
			"begin": "\"",
			"end": "\""
		}
	},
	"scopeName": "source.gold"
}