{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Gold",
	"patterns": [
		{ "include": "#class-declaration"},
		{ "include": "#comments"},
		{ "include": "#function-declaration"},
		{ "include": "#keyword"},
		{ "include": "#constant"}
	],
	"repository": {
		
		"comments": {
			"name": "comment.line",
			"begin": ";",
			"end": "[\n\r]"
		},


		"declaration": {
			"patterns": [
				{"include": "#class-declaration"},
				{"include": "#function-declaration"}
			]
		},
		"class-declaration":{
			"name": "meta.class",
			"comment": "Labels class name and inherited class name, end impossible to match so will go to end of file",
			"begin": "(class)(?:\\s+([\\w]+))(?:\\s+\\(([\\w]+)\\))?",
			"begincaptures": {
				"1": { "name": "storage.type.class"},
				"2": { "name": "entity.name.type.class"},
				"3": { "name": "entity.other.inherited-class"}
			},
			"patterns": [
				{ "include": "#comments"},
				{ "include": "#function-declaration"},
				{ "include": "#keyword"},
				{ "include": "#constant"}
			],
			"end": "(?=e)b"
		},
		"function-declaration":{
			"name": "meta.function",
			"comment": "",
			"begin": "(function)\\s+([\\w]+)(?:\\s*(\\(.*\\)))?\\s+(return)\\s+[\\w]+(?:\\s+([\\w]+))?(?:\\s+([\\w]+))?",
			"beginCaptures": {
				"1": { "name": "storage.type.function" },
				"2": { "name": "entity.name.function"},
				"3": { "patterns": [
					{"include": "#parameters"}
				]},
				"4": { "name": "keyword.control.flow"}
			},
			"end": "(endFunc)",
			"endCaptures": {
				"1": { "name": "storage.type.function" }
			}
		},
		"parameters" : {
			
		},


		"keyword": {
			"patterns": [
				{ "include": "#keyword-storage-type"},
				{ "include": "#keyword-control"}
			]
		},
		"keyword-storage-type": {
			"name": "storage.type",
			"match": "\\bclass\\b|\\bfunction\\b|\\bprocedure\\b"
		},
		"keyword-control": {
			"name": "keyword.control",
			"match": "\\b(if|while|for|return)\\b"
		},


		"constant":{
			"patterns": [
				{"include": "#constant-boolean"},
				{"include": "#constant-nil"},
				{"include": "#constant-integer"},
				{"include": "#constant-decimal"},
				{"include": "#constant-character"},
				{"include": "#constant-string"}
			]
		},
		"constant-boolean":{
			"name": "constant.language.boolean",
			"match": "\\b(true|True|false|False)\\b"
		},
		"constant-nil":{
			"name": "constant.language.nil",
			"match": "\\b(nil|Nil)\\b"
		},
		"constant-integer":{
			"name": "constant.numeric.integer",
			"match": "\\b\\d+\\b"
		},
		"constant-decimal":{
			"name": "constant.numeric.decimal",
			"match": "\\b\\d+(\\.\\d*)?\\b"
		},
		"constant-character":{
			"name": "constant.character",
			"match": "#\\d{1,3}\\b"
		},
		"constant-string": {
			"name": "string.quoted.single.gold",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.single-quote.escape.gold",
					"match": "''"
				}
			]
		}
	},
	"scopeName": "source.gold"
}